import io.kotless.DSLType
import io.kotless.KotlessConfig.Optimization.MergeLambda
import io.kotless.plugin.gradle.dsl.kotless

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.3.72"

    // Kotless Plugin, needs Kotlin >= 1.3.72
    id("io.kotless") version "0.1.6" apply true

    // Ktlint
    id("org.jlleitschuh.gradle.ktlint") version "9.4.1"
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {
    // Html support in kotlin
    implementation("org.jetbrains.kotlinx", "kotlinx-html-jvm", "0.6.11")

    // Add Kotless DSL to app
    implementation("io.kotless", "kotless-lang", "0.1.6")

    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:29.0-jre")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
}

tasks {
    compileKotlin {
        kotlinOptions.suppressWarnings = false
        kotlinOptions.allWarningsAsErrors = true
    }
    ktlint {
        ignoreFailures.set(false)
        enableExperimentalRules.set(true)
        disabledRules.set(setOf("no-wildcard-imports"))
    }
}

kotless {
    config {
        bucket = "mykotlessbucket"

        dsl {
            type = DSLType.Kotless
        }

        terraform {
            profile = "AWSLambdaToken"
            region = "eu-west-3"
        }

        optimization {
            mergeLambda = MergeLambda.None
            // autowarm = Autowarm(enable = true, minutes = 5)
        }
    }

    webapp {
        // Optional parameter, by default technical name will be generated
        // route53 = Route53("kotless", "localhost")

        lambda {
            timeoutSec = 300
            memoryMb = 512

            // needed only for Kotless DSL
            kotless {
                // Define packages in which scan for routes should be performed
                packages = setOf("aws.kotless.kotlin.page")
            }
        }
    }

    extensions {
        local {
            useAWSEmulation = false
            port = 9090
        }
    }
}
